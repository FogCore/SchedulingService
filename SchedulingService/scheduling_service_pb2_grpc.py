# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from SchedulingService import scheduling_service_pb2 as SchedulingService_dot_scheduling__service__pb2


class SchedulingAPIStub(object):
    """DONE Методы, которые предоставляет Scheduling Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCluster = channel.unary_unary(
                '/SchedulingAPI/CreateCluster',
                request_serializer=SchedulingService_dot_scheduling__service__pb2.Cluster.SerializeToString,
                response_deserializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithCluster.FromString,
                )
        self.ClusterState = channel.unary_unary(
                '/SchedulingAPI/ClusterState',
                request_serializer=SchedulingService_dot_scheduling__service__pb2.Cluster.SerializeToString,
                response_deserializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithCluster.FromString,
                )
        self.RemoveCluster = channel.unary_unary(
                '/SchedulingAPI/RemoveCluster',
                request_serializer=SchedulingService_dot_scheduling__service__pb2.Cluster.SerializeToString,
                response_deserializer=SchedulingService_dot_scheduling__service__pb2.Response.FromString,
                )
        self.SwarmManager = channel.unary_unary(
                '/SchedulingAPI/SwarmManager',
                request_serializer=SchedulingService_dot_scheduling__service__pb2.Empty.SerializeToString,
                response_deserializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithManager.FromString,
                )


class SchedulingAPIServicer(object):
    """DONE Методы, которые предоставляет Scheduling Service
    """

    def CreateCluster(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClusterState(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveCluster(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwarmManager(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchedulingAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCluster,
                    request_deserializer=SchedulingService_dot_scheduling__service__pb2.Cluster.FromString,
                    response_serializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithCluster.SerializeToString,
            ),
            'ClusterState': grpc.unary_unary_rpc_method_handler(
                    servicer.ClusterState,
                    request_deserializer=SchedulingService_dot_scheduling__service__pb2.Cluster.FromString,
                    response_serializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithCluster.SerializeToString,
            ),
            'RemoveCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveCluster,
                    request_deserializer=SchedulingService_dot_scheduling__service__pb2.Cluster.FromString,
                    response_serializer=SchedulingService_dot_scheduling__service__pb2.Response.SerializeToString,
            ),
            'SwarmManager': grpc.unary_unary_rpc_method_handler(
                    servicer.SwarmManager,
                    request_deserializer=SchedulingService_dot_scheduling__service__pb2.Empty.FromString,
                    response_serializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithManager.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SchedulingAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SchedulingAPI(object):
    """DONE Методы, которые предоставляет Scheduling Service
    """

    @staticmethod
    def CreateCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/CreateCluster',
            SchedulingService_dot_scheduling__service__pb2.Cluster.SerializeToString,
            SchedulingService_dot_scheduling__service__pb2.ResponseWithCluster.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClusterState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/ClusterState',
            SchedulingService_dot_scheduling__service__pb2.Cluster.SerializeToString,
            SchedulingService_dot_scheduling__service__pb2.ResponseWithCluster.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/RemoveCluster',
            SchedulingService_dot_scheduling__service__pb2.Cluster.SerializeToString,
            SchedulingService_dot_scheduling__service__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwarmManager(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchedulingAPI/SwarmManager',
            SchedulingService_dot_scheduling__service__pb2.Empty.SerializeToString,
            SchedulingService_dot_scheduling__service__pb2.ResponseWithManager.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class CloudletsAPIStub(object):
    """Методы Cloudlets Service, которыми пользуется Scheduling Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FindNearest = channel.unary_unary(
                '/CloudletsAPI/FindNearest',
                request_serializer=SchedulingService_dot_scheduling__service__pb2.Cloudlet.SerializeToString,
                response_deserializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithCloudletsList.FromString,
                )


class CloudletsAPIServicer(object):
    """Методы Cloudlets Service, которыми пользуется Scheduling Service
    """

    def FindNearest(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CloudletsAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FindNearest': grpc.unary_unary_rpc_method_handler(
                    servicer.FindNearest,
                    request_deserializer=SchedulingService_dot_scheduling__service__pb2.Cloudlet.FromString,
                    response_serializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithCloudletsList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CloudletsAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CloudletsAPI(object):
    """Методы Cloudlets Service, которыми пользуется Scheduling Service
    """

    @staticmethod
    def FindNearest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CloudletsAPI/FindNearest',
            SchedulingService_dot_scheduling__service__pb2.Cloudlet.SerializeToString,
            SchedulingService_dot_scheduling__service__pb2.ResponseWithCloudletsList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)


class ImagesAPIStub(object):
    """DONE Методы Images Service, которыми пользуется Scheduling Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Find = channel.unary_unary(
                '/ImagesAPI/Find',
                request_serializer=SchedulingService_dot_scheduling__service__pb2.Image.SerializeToString,
                response_deserializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithImage.FromString,
                )


class ImagesAPIServicer(object):
    """DONE Методы Images Service, которыми пользуется Scheduling Service
    """

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImagesAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=SchedulingService_dot_scheduling__service__pb2.Image.FromString,
                    response_serializer=SchedulingService_dot_scheduling__service__pb2.ResponseWithImage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImagesAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ImagesAPI(object):
    """DONE Методы Images Service, которыми пользуется Scheduling Service
    """

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ImagesAPI/Find',
            SchedulingService_dot_scheduling__service__pb2.Image.SerializeToString,
            SchedulingService_dot_scheduling__service__pb2.ResponseWithImage.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
